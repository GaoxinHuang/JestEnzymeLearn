L20 DRY Refactor
一. 内容: 做一些能重复用的代码
二. 测试代码
1.  写一些可以重复利用的代码
import App from './App';
Enzyme.config({adapter: new EnzymeAdapter()});

/**
 * Factory function to create a ShallowWrapper for the App component.
 * @function setup
 * @param {object} props - Component props specific to this setup.
 * @param {object} state - Initial state for setup.
 * @returns {ShallowWrapper}
*/
const setup = (props={}, state=null) =>{
    const wrapper = shallow(<App {...props} />)
    if (state) wrapper.setState(state);
    return wrapper;
}

/**
 * Return ShallowWrapper containing node(s) with the given data-test value.
 * @param {ShallowWrapper} wrapper - Enzyme shallow wrapper to search within.
 * @param {string} val - Value of data-test attribute for search.
 * @returns {ShallowWrapper}
 */
const findByTestAttr = (wrapper, val) => {
  return wrapper.find(`[data-test="${val}"]`);
}

2.  调用那些重复利用的代码
test('renders increment button', () => { 
    //var wrapper = shallow(<App />); 
    var wrapper = setup();

    //var button = wrapper.find("[data-test='increment-button']");
    var button = findByTestAttr("increment-button");

    expect(button.length).toBe(1);
});
