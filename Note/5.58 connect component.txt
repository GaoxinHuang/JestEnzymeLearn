L58 connected component tests (input.js & input.test.js)
L59 input Component Test Organization

L60 Start setup function for input component 
一. 测试代码
import React from 'react';
import { shallow } from 'enzyme';
import { findByTestAttr, storeFactory } from '../test/testUtils';
import Input, { UnconnectedInput } from './Input'; //这里等于直接传进来的 connect的Component 

const setup = (initialState={}) => {
  const wrapper = shallow(<Input/>);
  consolo.log(wrapper.debug());
  //注: 这里报错, 因为无法找到 store。 因为这里是connect component
  return wrapper;
}

L61. 'storeFactory' Test Helper 和 L62 Enzyme '.dive()' method
一. 测试的工具代码 testUtils.js
import { createStore, applyMiddleware } from 'redux';
import rootReducer from '../src/reducers';
export const storeFactory = (initialState) => {
  return creatStore(rootReducer, initialState) //这只是版本1
}

二. 更新L62 测试代码
const setup = (initialState={}) => {
  const store = storeFactory(initialState);
  const wrapper = shallow(<Input store={store} />).dive().dive(); // -> 这里就 return 是当前的那个component的具体内容
  consolo.log(wrapper.debug());
  return wrapper;
}
注: (1) 因为shallow 只有 render表面的 component, 无法深入render到它的children之类的. 
        而shallow 的connect component只是render 成 <ContextProvider><Input store={...} dispatch={...}></ContextProvider>
        而我们需要的是 input 的里面的内容。 所以dive() 就是 进下面的一层 level

L63 Summary of Connected Component Setup and Choice
本节就是讨论有几种方法去测试 connected Component
一. 方案一: 用 redux-mock-store 去mock redux (Enzyme 推荐这个)
1.  更接近 app
2.  can work with store

二. 方案二: 断开 connected 连接, 直接去测试 Connected Component (Redux testing doc 推荐这个)
1.  可以pass mock action 
2.  更具体的UI细节(feature)

L64 Input Tests and Code for success = false
一. 项目代码
  const contents = this.props.success? null: ....
注: null 其实可以在 react 里用的, 就返回一个空的

二. 测试代码
test('renders submit button', () => {
      const submitButton = findByTestAttr(wrapper, 'submit-button');
      expect(submitButton.length).toBe(1);
});