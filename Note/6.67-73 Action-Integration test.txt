67 - 68.    Planning 

69. Redux Thunk - Redux thunk 就是 return function

70. install redux-thunk 
一.  项目代码 - 
1.  configureStore.js
import ReduxThunk from 'redux-thunk';
import rootReducer from './reducers';
export const middleware = [ReduxThunk];
const createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);
export default createStoreWithMiddleware(rootReducer);

2.  测试代码改成
import {middlewares} from "./configureStore.js";
export const storeFactory = (initialState) => {
  const createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore)
  return createStoreWithMiddleware(rootReducer, initialState);
}

71. Thunk Test planning
1.  这个是 Integration Test (需要mock secretWord, 然后用于 guessedWord )
2.  需要创建 Integration.test.js (其实就是action和 store 结合的测试)
-----------------------------------------------------------------------------------

72 - 73. Actions 和 store 的测试 - Set up 'guess words' tests 
一. 重点
1.  state.getState(); 可以获取当前的 state的值
2.  state.getActions(公司用的): 可以获取 action 和对应的 data (其实没必要)

二. 项目代码:
1.  action的代码
export const guessWord = (guessedWord) => {
  return function(dispatch, getState) {
    const secretWord = getState().secretWord;
    const letterMatchCount = getLetterMatchCount(guessedWord, secretWord);
    dispatch({  type: actionTypes.GUESS_WORD,   payload: { guessedWord, letterMatchCount }});
    if (guessedWord === secretWord) {
      dispatch({ type: actionTypes.CORRECT_GUESS });
    }
  };
};

三. 测试代码:
1.  integration.test.js (其实就是已经mock secretWord 的word 是什么了, 等于需要mock 对应的 initialState)
import { storeFactory } from '../test/testUtils';
import { guessWord } from './actions';

describe('guessWord action dispatcher', () => {
  const secretWord = 'party';
  const unsuccessfulGuess = 'train';
  describe('no guessed words', () => {
    let store;
    const initialState = { secretWord };
    beforeEach(() => {
      store = storeFactory(initialState);
    });
    test('updates state correctly for unsuccessful guess', () => {
      store.dispatch(guessWord(unsuccessfulGuess));
      const newState = store.getState()
      const expectedState = {
        ...initialState,
        success: false,
        guessedWords: [{
          guessedWord: unsuccessfulGuess,
          letterMatchCount: 3
        }]
      };
      expect(newState).toEqual(expectedState);
    });
  });

  //下面是 第二次猜的时候, 所以使用的
  describe('some guessed words', () => {
    const guessedWords = [ { guessedWord: 'agile', letterMatchCount: 1 } ];
    const initialState = { guessedWords, secretWord }
    let store;
    beforeEach(() => {
      store = storeFactory(initialState);
    })
    test('updates state correctly for unsuccessful guess', () => {
        .....
    });
    test('updates state correctly for successful guess', () => {
      store.dispatch(guessWord(secretWord));
      const newState = store.getState();
      const expectedState = {
        secretWord,
        success: true,
        guessedWords: [...guessedWords, { guessedWord: secretWord, letterMatchCount: 5 }]
      };
      expect(newState).toEqual(expectedState);
    });
  });
});

